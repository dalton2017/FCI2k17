/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scalar.quantization;

/**
 *
 * @author Owner
 */
public class GUI extends javax.swing.JFrame {

    public int Quantizer;
    public GUI() {
        initComponents();      
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        InputTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        CompressResults = new javax.swing.JLabel();
        BitTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        OutPutPath = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Compress");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Decompress");

        InputTextField.setFont(new java.awt.Font("Tempus Sans ITC", 3, 14)); // NOI18N
        InputTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        InputTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter The Input Datapath", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 3, 14), new java.awt.Color(0, 0, 153))); // NOI18N
        InputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("<<--Scalar Quantizer-->>");

        CompressResults.setBackground(new java.awt.Color(51, 0, 255));
        CompressResults.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        CompressResults.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CompressResults.setText("Compress Results");
        CompressResults.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(102, 0, 0)));

        BitTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        BitTextField.setText("Enter The Bit Quantizing Level");
        BitTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BitTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("<html>\n<pre>\nEnter :\n2 : 2-Bit\n4 : 4-Bit\n8 : 8-Bit\n16 : 16-Bit\n32 : 32-Bit \nOther : Othe-Bit\n</html>");

        OutPutPath.setFont(new java.awt.Font("Tempus Sans ITC", 3, 14)); // NOI18N
        OutPutPath.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        OutPutPath.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter The Output Datapath", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 3, 14), new java.awt.Color(0, 0, 153))); // NOI18N
        OutPutPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutPutPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CompressResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BitTextField)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                    .addComponent(InputTextField)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OutPutPath))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutPutPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CompressResults, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputTextFieldActionPerformed
    
    private void BitTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BitTextFieldActionPerformed
        boolean accepted = false;
        while(accepted==false)
        {
            if(null!=BitTextField.getText())
            switch (BitTextField.getText()) {
                case "2":
                    Quantizer = 2;
                    accepted = true;
                    break;
                case "4":
                    Quantizer = 4;
                    accepted = true;
                    break;
                case "8":
                    Quantizer = 8;
                    accepted = true;
                    break;
                case "16":
                    Quantizer = 16;
                    accepted = true;
                    break;
                case "32":
                    Quantizer = 32;
                    accepted = true;
                    break;
                case "Other":
                case "other":
                    int input;
                    BitTextField.setText("Enter the <Other> Value");
                    input = Integer.parseInt(BitTextField.getText());
                    Quantizer = input;
                    accepted = true;
                    break;
                default:
                    Quantizer=0;
                    accepted = true;
                    break;
            }
        }
    }//GEN-LAST:event_BitTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String path = InputTextField.getText();
        ImageRW rw = new ImageRW();
        Node n = new Node();
        int [][] pixels = new int [rw.getWidth()][rw.getHeight()];
        pixels = ImageRW.readImage(path); 
        int sum=0;
        for(int i=0;i<rw.getWidth();i++)
        {
            for(int y=0;y<rw.getHeight();y++)
            {
                sum+=pixels[y][i];
            }
        }
        int numberOfPixels = rw.getWidth()* rw.getHeight();
        int avg = sum/numberOfPixels;
        int size=0;
        for(int i=0;i<=Quantizer;i++)
        {
            size+=Math.pow(Quantizer, i);
        }
        //System.out.println(size);
        int w = rw.getWidth();
        int h = rw.getHeight();
        Node [] Tree;
        Tree = new Node[size];
        for(int i=0;i<size;i++)
        {
            Tree[i]=new Node();
        }
        int index = 0;
        while(true)
        {

            Tree[index].setPixels(pixels);
            Tree[index].setAVG(avg);
            Tree[index].setLeft(Tree[(index*2)+1]);
            Tree[index].setRight(Tree[(index*2)+2]);
            Tree[index].setWidth(w);
            Tree[index].setHeight(h);
            Tree[index].getPixels();
            for(int i=0;i<Tree[index].getWidth();i++)
            {
                for(int y=0;y<Tree[index].getHeight();y++)
                {
                    if(Tree[index].getPixels()[y][i]<Tree[index].getAVG())
                    {                        
                        Tree[index].getLeft().getPixels()[y][i] = Tree[index].getPixels()[y][i];
                    }
                    else
                    {
                        Tree[index].getRight().getPixels()[y][i] = Tree[index].getPixels()[y][i];
                    }
                }
            }
            
            int sumL=0;
            int sumR=0;
            for(int i=0;i<rw.getWidth();i++)
            {
                for(int y=0;y<rw.getHeight();y++)
                {
                    sumL+=Tree[index].getLeft().getPixels()[y][i];
                    sumR+=Tree[index].getRight().getPixels()[y][i];
                }
            }            
            Tree[index].getLeft().setAVG(sumL/numberOfPixels);
            Tree[index].getRight().setAVG(sumR/numberOfPixels);            
            index++;            
            if((index*2)+2 > size)
            {
                break;
            }
            Tree[index].setRight(Tree[(index*2)+2]);
            Tree[index].setLeft(Tree[(index*2)+1]);
        }
        /*for(int i=0;i<size;i++)
        {
        System.out.println(Tree[i].getAVG());
        }*/
        int [][] newPixels = new int [rw.getHeight()][rw.getWidth()];
        for(int i=0;i<size;i++)
        {
            if(Tree[i].getLeft()==null||Tree[i].getRight()==null)
            {
                for(int y=0;y<rw.getHeight();y++)
                {
                    for(int j=0;j<rw.getWidth();j++)
                    {
                        if(Tree[i].getPixels()[y][j]>0)
                        {
                            Tree[i].getPixels()[y][j]=Tree[i].getAVG();
                            
                        }
                    }
                }
                newPixels = Tree[i].getPixels();
            }
        }
        String outputpath = OutPutPath.getText();
        ImageRW.writeImage(newPixels,outputpath,rw.getWidth(), rw.getHeight());
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void OutPutPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutPutPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OutPutPathActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BitTextField;
    private javax.swing.JLabel CompressResults;
    private javax.swing.JTextField InputTextField;
    private javax.swing.JTextField OutPutPath;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
