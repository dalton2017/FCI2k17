/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arithmatic.coding;
import java.math.BigDecimal;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Owner
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InputText = new javax.swing.JTextField();
        CompressButton = new javax.swing.JButton();
        DecompressButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        CompressResult = new javax.swing.JLabel();
        DecompressResult = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        InputText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        InputText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputTextActionPerformed(evt);
            }
        });

        CompressButton.setText("Compress");
        CompressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompressButtonActionPerformed(evt);
            }
        });

        DecompressButton.setText("Decompress");
        DecompressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecompressButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 3, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Arithmetic Coding");

        CompressResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CompressResult.setText("Coding Float & Data Length");
        CompressResult.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(102, 102, 102)));

        DecompressResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DecompressResult.setText("Decompress Results");
        DecompressResult.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(102, 102, 102)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DecompressResult, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(CompressResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(CompressButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                            .addComponent(DecompressButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(InputText)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(InputText, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CompressButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DecompressButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(CompressResult, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DecompressResult, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CompressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompressButtonActionPerformed
        //Loading Dictionary****************************************************
        int Data[][] = new int[94][2];
        int num = 0;
        int Letters[][] = new int [94][2];
        int ascii = 32;
        for(int i=0;i<94;i++)
        {
            Data[i][0] = ascii;
            ascii++;
        }
        //Checking Data*********************************************************
        String Input = InputText.getText();
        for(int i=0;i<Input.length();i++)
        {
            for(int y=0;y<94;y++)
            {
                if(Data[y][0]==(int)Input.charAt(i))
                {
                    Data[y][1]++;
                }
            }            
        }
        //Collecting needed Letters*********************************************
        for(int i=0;i<94;i++)
        {            
            if(Data[i][1]>0)
            {
                Letters[num][0] =Data[i][0];
                Letters[num][1] =Data[i][1];
                num++;
            }
        }
        //Data Check************************************************************
        /*for(int i=0;i<num;i++)
        {
        if(Letters[i][0]!=0.0)
        {
        System.out.println((char)Letters[i][0] + "-" + Letters[i][1]);
        }
        
        }*/
        //Algorithem************************************************************
        Node [] D;
        D = new Node[94];
        
        for(int i=0;i<num;i++)
        {
           Node Current = new Node();
           Current.setLetter((char)Letters[i][0]);
           Current.setProbability((float)Letters[i][1]/Input.length());
           //Current.PrintNode();
           D[i]=Current;
        }
        for(int y=0;y<num;y++)
        {
            if(y==0)
            {
                D[y].setLower((float)0);
                D[y].setUpper(D[y].getProbability());
            }else
            {
                D[y].setLower(D[y-1].getUpper());
                D[y].setUpper(D[y].getProbability()+D[y].getLower());
            }
            //D[y].PrintNode();            
        }
        float lower = (float)0;
        float upper = (float)0;
        float code = (float)0;
        for(int i=0;i<Input.length();i++)
        {
            for(int y=0;y<num;y++)
            {
                if(D[y].getLetter()==Input.charAt(i))
                {
                   lower = D[y].getLower();
                   upper = D[y].getUpper();                   
                   break;
                }                        
            }
            if(Input.length()-i==1)
            {
               code=(lower+upper)/2;
               break;
            }else
            {
                for(int u=0;u<num;u++)
                {
                    D[u].setLower((lower+(upper-lower)*D[u].getLower()));
                    D[u].setUpper((lower+(upper-lower)*D[u].getUpper()));                
                }
            }                            
        }
        Files f = new Files();
        f.openFile();
        System.out.println(code);
        String Code=String.valueOf(code);
        CompressResult.setText(Code + "-" + Input.length());
        Code+=";"+Input.length();
        try {
            f.addRecord(Code);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        Node x = new Node();
        x.StoreData(Letters);
        x.setLength(Input.length());
        
    }//GEN-LAST:event_CompressButtonActionPerformed

    private void InputTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputTextActionPerformed

    private void DecompressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecompressButtonActionPerformed
        Files f= new Files();
        Node n = new Node();
        String Data="";
        int [][] Da = new int[94][2];
        try {
            Data = f.RetrieveData();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        int length = 0;
        float code = (float) 0;
        String find="";
        for(int i=0;i<Data.length();i++)
        {
            if(Data.charAt(i)==';')
            {
                i++;
                code=Float.parseFloat(find); 
                find ="";
                for(int y=i;y<Data.length();y++)
                {
                    find+=Data.charAt(y);
                }
                length = Integer.parseInt(find);       
                break;
            }else
            {
                find+=Data.charAt(i);
            }
        }               
        System.out.println("Code : " + code);
        System.out.println("Length : " + length);
        Da = n.RetriveData();
        Node [] D;
        D = new Node[94];
        int num = 0;
        String Decompress = "";
        float Basic [][] = new float [94][3];
        for(int i=0;i<94;i++)
        {
           if(Da[i][0]==0)
           {
               break;
           }
           Node Current = new Node();
           Current.setLetter((char)Da[i][0]);
           Basic[i][0] =(float)Da[i][0];
           Current.setProbability((float)Da[i][1]/length);
           //Current.PrintNode();
           D[i]=Current;
           num++;           
        }        
        for(int y=0;y<num;y++)
        {
            if(y==0)
            {
                D[y].setLower((float)0);
                D[y].setUpper(D[y].getProbability());
                Basic[y][1] = (float)0;
                Basic[y][2] = D[y].getProbability();
            }else
            {
                D[y].setLower(D[y-1].getUpper());
                D[y].setUpper(D[y].getProbability()+D[y].getLower());
                Basic[y][1] = D[y-1].getUpper();
                Basic[y][2] = D[y].getProbability()+D[y].getLower();
            }
            //D[y].PrintNode();            
        }
        float lower = (float)0;
        float upper = (float)0;
        for(int i=0;i<length;i++)
        {
            for(int y=0;y<num;y++)
            {
                System.out.println(Basic[y][1]+"-"+code+"-"+Basic[y][2]);
                if(Basic[y][1]<=code && code<=Basic[y][2])
                {
                   System.out.println("???");
                   lower = D[y].getLower();
                   upper = D[y].getUpper();
                   code = (code-Basic[y][1])/(Basic[y][2]-Basic[y][1]);
                   Decompress+=(char)Basic[y][0];
                   break;
                }                        
            }

            for(int u=0;u<num;u++)
            {                
                D[u].setLower((lower+(upper-lower)*D[u].getLower()));
                D[u].setUpper((lower+(upper-lower)*D[u].getUpper()));                
            }            
            
                                        
        }
        DecompressResult.setText(Decompress);
        
    }//GEN-LAST:event_DecompressButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CompressButton;
    private javax.swing.JLabel CompressResult;
    private javax.swing.JButton DecompressButton;
    private javax.swing.JLabel DecompressResult;
    private javax.swing.JTextField InputText;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
